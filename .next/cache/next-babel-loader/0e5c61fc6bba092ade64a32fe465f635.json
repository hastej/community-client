{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Space\\\\Web Development\\\\Community++\\\\client\\\\components\\\\add-answer\\\\index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useContext } from 'react';\nimport Link from 'next/link';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { FetchContext } from '../../store/fetch';\nimport { AuthContext } from '../../store/auth';\nimport ModalContext from '../../store/modal';\nimport TextArea from '../textarea';\nimport Button from '../button';\nimport Tag from '../tag';\nimport styles from './add-answer.module.css';\n\nvar AddAnswer = function AddAnswer(_ref) {\n  _s();\n\n  var id = _ref.id,\n      tags = _ref.tags,\n      setQuestion = _ref.setQuestion;\n  console.log('In AddAnswer');\n\n  var _useContext = useContext(FetchContext),\n      authAxios = _useContext.authAxios;\n\n  var _useContext2 = useContext(AuthContext),\n      isAuthenticated = _useContext2.isAuthenticated;\n\n  var _useContext3 = useContext(ModalContext),\n      handleComponentVisible = _useContext3.handleComponentVisible;\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  return __jsx(Formik, {\n    initialValues: {\n      text: ''\n    },\n    onSubmit: /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref2) {\n        var setStatus, resetForm, _yield$authAxios$post, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setStatus = _ref2.setStatus, resetForm = _ref2.resetForm;\n                setLoading(true);\n                _context.prev = 2;\n                _context.next = 5;\n                return authAxios.post(\"/answer/\".concat(id), values);\n\n              case 5:\n                _yield$authAxios$post = _context.sent;\n                data = _yield$authAxios$post.data;\n                setQuestion(data);\n                resetForm({});\n                _context.next = 14;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](2);\n                setStatus(_context.t0.response.data.message);\n\n              case 14:\n                setLoading(false);\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 11]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }(),\n    validationSchema: Yup.object({\n      text: Yup.string().required('Body is missing.').min(30, 'Body must be at least 30 characters.').max(30000, 'Body cannot be longer than 30000 characters.')\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, function (_ref4) {\n    var values = _ref4.values,\n        errors = _ref4.errors,\n        touched = _ref4.touched,\n        status = _ref4.status,\n        handleChange = _ref4.handleChange,\n        handleBlur = _ref4.handleBlur,\n        handleSubmit = _ref4.handleSubmit,\n        isSubmitting = _ref4.isSubmitting;\n    return __jsx(\"form\", {\n      className: styles.container,\n      onSubmit: handleSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, __jsx(\"h2\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    }, \"Your answer\"), __jsx(TextArea, {\n      name: \"text\",\n      autoComplete: \"off\",\n      value: values.text,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      hasError: touched.text && errors.text,\n      errorMessage: errors.text && errors.text,\n      className: styles.textarea,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }\n    }), __jsx(\"p\", {\n      className: styles.status,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    }, status), __jsx(\"div\", {\n      className: styles.button,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }\n    }, __jsx(Button, {\n      type: \"submit\",\n      primary: true,\n      isLoading: loading,\n      disabled: isSubmitting,\n      onClick: function onClick() {\n        return !isAuthenticated() && handleComponentVisible(true, 'signup');\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    }, \"Post Your Answer\")), __jsx(\"h3\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }\n    }, \"Browse other questions tagged \\xA0\", tags.map(function (tag) {\n      return __jsx(Tag, {\n        key: tag,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 15\n        }\n      }, tag);\n    }), \"or \\xA0\", __jsx(Link, {\n      href: \"/questions/ask\",\n      as: \"/questions/ask\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    }, __jsx(\"a\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 15\n      }\n    }, \"ask your own question.\"))));\n  });\n};\n\n_s(AddAnswer, \"46QytK0PuUrz47gJBVnG6xPQAXM=\");\n\n_c = AddAnswer;\nexport default AddAnswer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddAnswer\");","map":{"version":3,"sources":["C:/Space/Web Development/Community++/client/components/add-answer/index.js"],"names":["React","useState","useContext","Link","Formik","Yup","FetchContext","AuthContext","ModalContext","TextArea","Button","Tag","styles","AddAnswer","id","tags","setQuestion","console","log","authAxios","isAuthenticated","handleComponentVisible","loading","setLoading","text","values","setStatus","resetForm","post","data","response","message","object","string","required","min","max","errors","touched","status","handleChange","handleBlur","handleSubmit","isSubmitting","container","textarea","button","map","tag"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react'\nimport Link from 'next/link'\nimport { Formik } from 'formik'\nimport * as Yup from 'yup'\n\nimport { FetchContext } from '../../store/fetch'\nimport { AuthContext } from '../../store/auth'\nimport ModalContext from '../../store/modal'\n\nimport TextArea from '../textarea'\nimport Button from '../button'\nimport Tag from '../tag'\n\nimport styles from './add-answer.module.css'\n\nconst AddAnswer = ({ id, tags, setQuestion }) => {\n  console.log('In AddAnswer');\n\n  const { authAxios } = useContext(FetchContext)\n  const { isAuthenticated } = useContext(AuthContext)\n  const { handleComponentVisible } = useContext(ModalContext)\n\n  const [loading, setLoading] = useState(false)\n\n  return (\n    <Formik\n      initialValues={{ text: '' }}\n      onSubmit={async (values, { setStatus, resetForm }) => {\n        setLoading(true)\n        try {\n          const { data } = await authAxios.post(`/answer/${id}`, values)\n          setQuestion(data)\n          resetForm({})\n        } catch (error) {\n          setStatus(error.response.data.message)\n        }\n        setLoading(false)\n      }}\n      validationSchema={Yup.object({\n        text: Yup.string()\n          .required('Body is missing.')\n          .min(30, 'Body must be at least 30 characters.')\n          .max(30000, 'Body cannot be longer than 30000 characters.')\n      })}\n    >\n      {({\n        values,\n        errors,\n        touched,\n        status,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <form className={styles.container} onSubmit={handleSubmit}>\n          <h2>Your answer</h2>\n          <TextArea\n            name=\"text\"\n            autoComplete=\"off\"\n            value={values.text}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            hasError={touched.text && errors.text}\n            errorMessage={errors.text && errors.text}\n            className={styles.textarea}\n          />\n          <p className={styles.status}>{status}</p>\n          <div className={styles.button}>\n            <Button\n              type=\"submit\"\n              primary\n              isLoading={loading}\n              disabled={isSubmitting}\n              onClick={() => !isAuthenticated() && handleComponentVisible(true, 'signup')}\n            >\n              Post Your Answer\n            </Button>\n          </div>\n          <h3>\n            Browse other questions tagged &nbsp;\n            {tags.map((tag) => (\n              <Tag key={tag}>{tag}</Tag>\n            ))}\n            or &nbsp;\n            <Link href=\"/questions/ask\" as=\"/questions/ask\">\n              <a>ask your own question.</a>\n            </Link>\n          </h3>\n        </form>\n      )}\n    </Formik>\n  )\n}\n\nexport default AddAnswer\n"]},"metadata":{},"sourceType":"module"}